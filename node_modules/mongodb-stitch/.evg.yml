functions:
  "fetch_source":
    - command: git.get_project
      params:
        directory: "stitch-js-sdk"

  "setup_mongod":
    - command: shell.exec
      params:
        script: |
          set -v
          curl --silent ${mongodb_url} | tar xvz
    - command: shell.exec
      params:
        background: true
        script: |
          set -v
          cd mongodb-*
          echo "starting mongod..."
          mkdir db_files
          ./bin/mongod --dbpath ./db_files --port 26000 &
          echo "waiting for mongod to start up"
    - command: shell.exec
      params:
        script: |
          set -e
          cd mongodb-*
          ./bin/mongo --nodb --eval 'assert.soon(function(x){try{var d = new Mongo("localhost:26000"); return true}catch(e){return false}}, "timed out connecting")'
          echo "mongod is up."

  "set_github_build_status":
    - command: shell.exec
      params:
        silent: true
        script: |
          status_url=`curl -X POST -d "{}" -H "Content-Type: application/json" "${stitch_evg_hook_url}?secret=${stitch_evg_secret}&versionId=${version_id}"`
          if [ "$status_url" = "null" ]; then
            exit 0
          fi
          status_url=`sed -e 's/^"//' -e 's/"$//' <<<"$status_url"`
          state=`cat commit_state`
          curl -X POST -H "Content-Type: application/json" $status_url -d "{\"state\": \"$state\", \"target_url\": \"https://evergreen.mongodb.com/build/${build_id}\", \"context\": \"continuous-integration/evergreen-ci/${build_variant}\"}"

  "setup_stitch":
    - command: shell.exec
      params:
        silent: true
        script: |
          set -e
          echo export AWS_ACCESS_KEY_ID=${test_aws_key} >> creds
          echo export AWS_SECRET_ACCESS_KEY=${test_aws_secret} >> creds
          echo export TWILIO_SID=${test_twilio_sid} >> creds
          echo export TWILIO_AUTHTOKEN=${test_twilio_authtoken} >> creds
          echo export FB_APP_ID=${test_facebook_app_id} >> creds
          echo export FB_APP_SECRET=${test_facebook_app_secret} >> creds

    - command: shell.exec
      params:
        script: |
          set -e
          echo "cloning stitch"
          mkdir -p src/github.com/10gen
          git clone git@github.com:10gen/stitch src/github.com/10gen/stitch

          echo "downloading libmongo"
          wget --quiet "https://s3.amazonaws.com/stitch-artifacts/stitch-mongo-libs/stitch_mongo_libs_linux_64_patch_cbcbfd8ebefcca439ff2e4d99b022aedb0d61041_59e2b78c2fbabe58b8001850_17_10_15_01_19_08/libmongo.so"
          chmod +x libmongo.so
    - command: shell.exec
      params:
        background: true
        script: |
          export GOPATH=`pwd`
          export PATH="`pwd`:$PATH"
          export STITCH_PATH=$GOPATH/src/github.com/10gen/stitch
          cd stitch-js-sdk/test/bin
          echo "running stitch"
          go run $STITCH_PATH/cmd/server/main.go --configFile $STITCH_PATH/etc/configs/test_config.json
    - command: shell.exec
      params:
        script: |
          counter=0
          until $(curl --output /dev/null --silent --head --fail http://localhost:9090); do
            echo "checking for API server to be up..."
            sleep 1
            let counter++
            if [ $counter -gt 100 ]; then
              exit 1
            fi
          done

tasks:
  - name: github_pull_request_start
    priority: 100
    commands:
      - command: shell.exec
        params:
          script: |
            if ! [ "${is_patch}" = "true" ]; then
              exit 0
            fi
            echo pending > commit_state
      - func: "set_github_build_status"

  - name: github_pull_request_end
    depends_on:
      - name: github_pull_request_start
      - name: run_tests
        status: "*"
        variant: linux-64
      - name: dist
        status: "*"
        variant: linux-64
      - name: check_import
        status: "*"
        variant: linux-64
      - name: eslint
        status: "*"
        variant: "linux-64"
    commands:
      - command: shell.exec
        params:
          silent: true
          script: |
            if ! [ "${is_patch}" = "true" ]; then
              exit 0
            fi
            curl -H "Auth-Username: ${evg_rest_user}" -H "Api-Key: ${evg_rest_api_key}"  https://evergreen.mongodb.org/rest/v1/builds/${build_id} | python -c "import sys, json; tasks = json.load(sys.stdin)['tasks']; sys.exit(0) if all(tasks[task]['status'] == 'success' or task == 'github_pull_request_end'  for task in tasks) else sys.exit(1)"
            if [ $? -eq 0 ]; then
              state="success"
            else
              state="failure"
            fi
            echo $state > commit_state
      - func: "set_github_build_status"


  - name: run_tests
    commands:
      - func: "fetch_source"
      - func: "setup_mongod"
      - func: "setup_stitch"
      - command: shell.exec
        params: 
          script: | # NOTE: Using yarn for install instead of npm due to evergreen permission issue with chromedriver devDependency
            set -e
            echo "running client tests"
            source ./creds
            cd stitch-js-sdk
            yarn install
            npm run test

  - name: check_import
    commands:
      - func: "fetch_source"
      - command: shell.exec
        params:
          script: |
            set -e
            cd stitch-js-sdk
            yarn install
            npm run build
            npm run build-web
            npm run build-web-dev
            mkdir tmp
            cd tmp
            npm pack ../
            mv mongodb-stitch-*.tgz mongodb-stitch.tgz
            cd ../../
            mkdir test_app
            cd test_app
            npm install --save ../stitch-js-sdk/tmp/mongodb-stitch.tgz
            node -e 'process.on("unhandledRejection", err => { throw err }); const stitch = require("mongodb-stitch"); stitch.StitchClientFactory.create("stitchtest-vsfmv").then(client => client.login());'

  - name: dist
    commands:
      - func: "fetch_source"
      - command: shell.exec
        params:
          script: |
            set -e
            cd stitch-js-sdk
            yarn install
            npm run build
            npm run build-web
            npm run build-web-dev
            mkdir tmp
            cd tmp
            npm pack ../
            mv mongodb-stitch-*.tgz mongodb-stitch.tgz

      - command: s3.put
        params:
          aws_key: ${sdks_aws_key}
          aws_secret: ${sdks_aws_secret}
          local_file: stitch-js-sdk/dist/web/stitch.js
          remote_file: js/library/${version_id}/stitch.js
          bucket: stitch-sdks
          permissions: public-read
          content_type: application/javascript
          display_name: Stitch Javascript Library for Web

      - command: s3.put
        params:
          aws_key: ${sdks_aws_key}
          aws_secret: ${sdks_aws_secret}
          local_file: stitch-js-sdk/dist/web/stitch.min.js
          remote_file: js/library/${version_id}/stitch.min.js
          bucket: stitch-sdks
          permissions: public-read
          content_type: application/javascript
          display_name: Stitch Javascript Library for Web (minified)

      - command: s3.put
        params:
          aws_key: ${sdks_aws_key}
          aws_secret: ${sdks_aws_secret}
          local_file: stitch-js-sdk/dist/web/stitch.min.js.map
          remote_file: js/library/${version_id}/stitch.min.js.map
          bucket: stitch-sdks
          permissions: public-read
          content_type: application/javascript
          display_name: Stitch Javascript Library for WebÂ Source Map

      - command: s3.put
        params:
          aws_key: ${sdks_aws_key}
          aws_secret: ${sdks_aws_secret}
          local_file: stitch-js-sdk/tmp/mongodb-stitch.tgz
          remote_file: js/npm/${version_id}/stitch.tgz
          bucket: stitch-sdks
          permissions: public-read
          content_type: application/gzip
          display_name: Stitch NPM package

  - name: docs_dist
    depends_on:
      - name: run_tests
      - name: check_import
    commands:
      - func: "fetch_source"
      - command: shell.exec
        params:
          script: |
            set -e
            cd stitch-js-sdk
            yarn install
            npm run docs

      - command: shell.exec
        params:
          script: |
            set -e
            echo "setting up AWS CLI"
            curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
            unzip awscli-bundle.zip
            ./awscli-bundle/install -b ~/bin/aws
            echo "uploading docs for ${branch_name}/${revision}"

      - command: shell.exec
        params:
          silent: true
          script: |
            set -e
            export PATH=$HOME/bin:$PATH
            export AWS_ACCESS_KEY_ID=${sdks_aws_key}
            export AWS_SECRET_ACCESS_KEY=${sdks_aws_secret}
            
            if [ "${is_patch|}" = "true" ]; then
                # Avoids clobbering docs from other patches or non-patch tasks under the same base commit.
                aws s3 cp stitch-js-sdk/docs s3://stitch-sdks/js/docs/${version_id} --recursive --acl public-read
            else
                cd stitch-js-sdk 
                export TAG_OR_REV="$(git describe --exact-match || echo ${revision})"
                cd ..
                aws s3 cp stitch-js-sdk/docs s3://stitch-sdks/js/docs/$TAG_OR_REV --recursive --acl public-read
                aws s3 cp stitch-js-sdk/docs s3://stitch-sdks/js/docs/${branch_name} --recursive --acl public-read
            fi

  - name: eslint
    commands:
      - func: "fetch_source"
      - command: shell.exec
        params:
          script: |
            set -e
            cd stitch-js-sdk
            echo "linting"
            yarn install
            npm run lint --quiet

buildvariants:
- name: linux-64
  display_name: Linux-64
  run_on:
    - baas-linux
  expansions:
    mongodb_url: http://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.4.4.tgz
  tasks:
    - name: github_pull_request_start
    - name: run_tests
    - name: dist
    - name: check_import
    - name: docs_dist
    - name: eslint
    - name: github_pull_request_end
